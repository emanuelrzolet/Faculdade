# Importar bibliotecas necessárias
import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import matplotlib.pyplot as plt

# Carregar o dataset MNIST
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalizar os dados (converter os valores dos pixels para o intervalo 0-1)
x_train, x_test = x_train / 255.0, x_test / 255.0

# Visualizar alguns exemplos do dataset
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(x_train[i], cmap=plt.cm.binary)
    plt.xlabel(y_train[i])
plt.show()

# Construir a rede neural
model = models.Sequential([
    layers.Flatten(input_shape=(28, 28)),  # Camada de Entrada
    layers.Dense(128, activation='relu'),  # Camada Oculta
    layers.Dense(10, activation='softmax') # Camada de Saída (10 classes)
])

# Compilar o modelo
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Treinar o modelo
history = model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Avaliar o modelo
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print('\nTest accuracy:', test_acc)

# Visualizar a curva de aprendizado
plt.plot(history.history['accuracy'], label='Acurácia de Treinamento')
plt.plot(history.history['val_accuracy'], label = 'Acurácia de Validação')
plt.xlabel('Épocas')
plt.ylabel('Acurácia')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

# Fazer previsões
predictions = model.predict(x_test)

# Mostrar a previsão para a primeira imagem de teste
print("Previsão do primeiro teste: ", np.argmax(predictions[0]))
print("Resposta correta: ", y_test[0])

# Visualizar a imagem
plt.imshow(x_test[0], cmap=plt.cm.binary)
plt.show()